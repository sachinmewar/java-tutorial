
 * The Bytecode:
   * The key that allowed Java to solve both the security and the portability problems just described is that the output
    of a Java compiler is not executable code. Rather, it is bytecode.
   * Bytecode is a highly optimized set of instructions designed to be executed by what is called the Java Virtual Machine (JVM),
     which is part of the Java Runtime Environment (JRE). In essence, the original JVM was designed as an interpreter for bytecode.
   * Translating a Java program into bytecode makes it much easier to run a program in a wide variety of environments
     because only the JVM needs to be implemented for each platform. Once a JRE exists for a given system, any Java
     program can run on it.
   * The fact that a Java program is executed by the JVM also helps to make it secure. Because the JVM is in control,
     it manages program execution.
   * Thus, it is possible for the JVM to create a restricted execution environment, called the sandbox, that contains the
    program, preventing unrestricted access to the machine. Safety is also enhanced by certain restrictions that exist
    in the Java language.
   * In general, when a program is compiled to an intermediate form and then interpreted by a virtual machine, it runs
     slower than it would run if compiled to executable code. Because bytecode has been highly optimized, the use of
     bytecode enables the JVM to execute programs much faster than expected.
   * Although Java was designed as an interpreted language, there is nothing about Java that prevents on-the-fly compilation
     of bytecode into native code in order to boost performance. For this reason, the HotSpot technology was
     introduced not long after Java’s initial release. HotSpot provides a Just-In-Time (JIT) compiler for bytecode.
   * When a JIT compiler is part of the JVM, selected portions of bytecode are compiled into executable code in real time, on
     a piece-by-piece, demand basis. It is important to understand that an entire Java program is not compiled into executable
     code all at once. Instead, a JIT compiler compiles code as it is needed, during execution.
   * Furthermore, not all sequences of bytecode are compiled—only those that will benefit from compilation. The remaining
     code is simply interpreted. However, the just-in-time approach still yields a significant performance boost. Even
     when dynamic compilation is applied to bytecode, the portability and safety features still apply, because the JVM is
     still in charge of the execution environment.
   * Beginning with JDK 9, some Java environments will also support an ahead-of-time compiler that can be used to compile
     bytecode into native code prior to execution by the JVM, rather than on-the-fly. Ahead-of-time compilation is a specialized
     feature, and it does not replace Java’s traditional approach just described.