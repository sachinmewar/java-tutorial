
  * Automatically Closing a File:
    * JDK 7 added a feature by automating the closing process.
    * This feature, sometimes referred to as automatic resource management(ARM)
    * The principal advantage of automatic resource management is that it prevents situations in which a
      file(or other resource) is inadvertently not released after it is no longer needed.
    * Automatic resource management is based on an expanded form of the try statement.
    * General form: try(resource-specification){}
    * Typically, resource-specification is a statement that declares and initializes aresource, such as a file stream.
    * When the try block ends, the resource is automatically released.
    * This form of try is called the try-with-resources statement.
    * From JDK 9, it is also possible for the resource specification of the try to consist of a variable that has been
      declared and initialized earlier in the program. However, that variable must be final.
    * The try-with-resources statement can be used only with those resources that implement the AutoCloseable interface
      defined by java.lang. This interface defines the close( ) method. AutoCloseable is inherited by the Closeable
      interface in java.io. Both interfaces are implemented by the stream classes.
    * The resource declared in the try statement is implicitly final. Also, the scope of the resource is limited to
      the try-with-resources statement.
    * From JDK 10, you can use local variable type inference to specify the type of the resource declared in a
      try-with-resources statement. To do so, specify the type as var.
      When this is done, the type of the resource is inferred from its initializer.
    * For example: try(var fin = new FileInputStream(args[0])) { }
      Here, fin is inferred to be of type FileInputStream because that is the type of its initializer.
    * It is possible to manage more than one resource within a single try statement by separating each
      resource-specification with semicolon.
    * In general, when a try block executes, it is possible that an exception inside the try block will lead to
      another exception that occurs when the resource is closed in a finally clause. In the case of a “normal” try
      statement, the original exception is lost, being preempted by the second exception. However, when
      using try-with-resources, the second exception is suppressed. It is not, however, lost. Instead, it is added to
      the list of suppressed exceptions associated with the first exception. The list of suppressed exceptions can be
      obtained by using the getSuppressed( ) method defined by Throwable.

  * The transient and volatile Modifiers:
    * When an instance variable is declared as transient, its value need not persist when an object is stored.
    * For example:
      Class Trans{
       transient int val1;
       int val2;
      }
    * The content of val1 would not be saved, but the contents of val2 would.
    * The volatile modifier tells the compiler that the variable modified by volatile can be changed unexpectedly by
      other parts of your program. For e.g. multithreaded programs.
    * In a multithreaded program, sometimes two or more threads share the same variable. For efficiency
      considerations, each thread can keep its own, private copy of such a shared variable.
    * The real(or master) copy of the variable is updated at various times, such as when a synchronized method is
      entered. While this approach works fine, it may be inefficient at times. In some cases, all that really matters
      is that the master copy of a variable always reflects its current state. To ensure this, simply specify the
      variable as volatile, which tells the compiler that it must always use the master copy of a volatile variable
      (or, at least, always keep any private copies up-to-date with the master copy, and vice versa). Also, accesses
      to the shared variable must be executed in the precise order indicated by the program.